<!DOCTYPE html>
<html>
<head>
    <title>Guork yn progres chicos</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/peerjs/1.4.7/peerjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0 20px;
            background-color: #1a1a1a;
            color: #e0e0e0;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
        }

        .container {
            max-width: 800px;
            width: 100%;
            background-color: #2a2a2a;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.4);
        }
    
        .connection-status {
            padding: 10px;
            margin: 10px 0;
            border-radius: 4px;
            color: #f0f0f0;
        }
    
        .connected {
            background-color: #28a745;
            color: #fff;
        }
    
        .disconnected {
            background-color: #dc3545;
            color: #fff;
        }
    
        #messageArea {
            height: 700px;
            border: 1px solid #444;
            border-radius: 4px;
            overflow-y: scroll;
            margin: 10px 0;
            padding: 10px;
            background-color: #222;
            color: #e0e0e0;
        }
    
        #debugArea {
            height: 100px;
            border: 1px solid #555;
            border-radius: 4px;
            overflow-y: scroll;
            margin: 10px 0;
            padding: 10px;
            font-family: monospace;
            font-size: 12px;
            background-color: #333;
            color: #bbb;
        }
    
        .message-input-container {
            display: flex;
            gap: 10px;
            margin: 10px 0;
        }
    
        input[type="text"] {
            padding: 8px;
            border: 1px solid #444;
            border-radius: 4px;
            flex-grow: 1;
            background-color: #2a2a2a;
            color: #ddd;
        }
        
        input[type="password"] {
            padding: 8px;
            width: 185px;
            border: 1px solid #444;
            border-radius: 4px;
            flex-grow: 1;
            background-color: #2a2a2a;
            color: #ddd;
        }
    
        button {
            padding: 8px 16px;
            background-color: #3a7bd5;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
    
        button:hover {
            background-color: #356bb3;
        }
    
        .setup-container {
            margin-bottom: 20px;
        }
    
        .contact-list {
            margin: 10px 0;
            padding: 10px;
            border: 1px solid #444;
            border-radius: 4px;
            background-color: #2a2a2a;
            color: #ddd;
        }
    
        .message {
            margin: 5px 0;
            padding: 8px;
            border-radius: 4px;
            max-width: 80%;
        }
    
        .sent {
            background-color: #3a7bd5;
            color: white;
            margin-left: auto;
        }
    
        .received {
            background-color: #444;
            color: #e0e0e0;
            margin-right: auto;
        }
    
        .timestamp {
            font-size: 0.8em;
            color: #ffffff;
        }
    
        .contact-management {
            margin: 10px 0;
            padding: 10px;
            border-top: 1px solid #ccc;
        }
    
        .danger-button {
            background-color: #dc3545;
        }
    
        .danger-button:hover {
            background-color: #bd2130;
        }
    
        .contact-actions {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
    
        .contact-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 5px;
            margin: 5px 0;
            background-color: #1e1e1e;
            border-radius: 4px;
        }
    
        .contact-item button {
            padding: 4px 8px;
            font-size: 0.9em;
        }

        .image-container {
            display: inline-block;
            margin: 10px 0;
            text-align: center;
        }

        .message-image {
            width: 300px; /* Adjust width to your desired size */
            height: auto; /* Maintains aspect ratio */
            border-radius: 8px;
        }

        .image-source-link {
            display: block;
            font-size: 0.8em;
            color: #007bff;
            text-decoration: none;
            margin-top: 4px;
        }
        
        .image-source-link:hover {
            text-decoration: underline;
        }
        @media (max-width: 600px) {
            body {
                max-width: 100%;
                font-size: 16px;
                line-height: 1.6;
                -webkit-text-size-adjust: 100%;
            }

            .container {
                background-color: #1a1a1a;
                padding: 5px;
                border-radius: 8px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.0);
            }

            .setup-container {
                margin: 16px;
                font-size: 18px;
                color: #ffffff;
            }

            #debugArea {
                display: none;
            }

            input[type="text"], input[type="password"] {
                padding: 12px;
                font-size: 16px;
                width: 90%;
                border: 1px solid #ddd;
                border-radius: 8px;
                margin: 8px 0;
                -webkit-appearance: none;
                box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            }

            button {
                padding: 12px 24px;
                font-size: 15px;
                width: 90%;
                max-width: 320px;
                background-color: #4a90e2;
                color: white;
                border: none;
                border-radius: 8px;
                margin: 8px 0;
                cursor: pointer;
                transition: background-color 0.2s ease;
                -webkit-tap-highlight-color: transparent;
            }

            button:active {
                background-color: #357abd;
                transform: scale(0.98);
            }

            #messageArea {
                height: 65vh;
                font-size: 16px;
                padding: 12px;
                border: none;
                border-radius: 8px;
                background-color: #1a1a1a;
                margin: 16px 0;
                overflow-y: auto;
                -webkit-overflow-scrolling: touch;
            }
        }
    </style>        
</head>
<body>
    <div class="container">
        <div style="margin-left: 10px;">
            <h1 style="margin-bottom: 0;">Chat 2.1</h1>
            <p style="color: #333; margin-top: 0;">Name pending btw lol</p>
        </div>
        
        <div class="setup-container" id="setupPanel">
            <h3>User Setup</h3>
            <input type="text" id="usernameInput" placeholder="Enter a display name">
            <input type="password" id="passwordInput" placeholder="Set a password (optional)">
            <button onclick="setUsername()">Save Profile</button>
            <a href="#" onclick="showHelp(); return false;">Help</a>
            <iframe id="helpFrame" style="display: none; width: 100%; height: 200px; border: 1px solid #ddd;" src="hewlPwease.txt"></iframe>
        </div>
        
        <script>
            function showHelp() {
                const helpFrame = document.getElementById("helpFrame");
                helpFrame.style.display = helpFrame.style.display === "none" ? "block" : "none";
                
                if (helpFrame.style.display === "block") {
                    helpFrame.onload = function() {
                        const doc = helpFrame.contentDocument || helpFrame.contentWindow.document;
                        const style = doc.createElement("style");
                        style.textContent = "body { background-color: #fff; color: #000; font-family: Arial, sans-serif; padding: 10px; }";
                        doc.head.appendChild(style);
                    };
                }
            }
        </script>                         
        
        <div id="mainPanel" style="display: none;">
            <div>
                <h3>Your ID: <span id="myId">Generating...</span>
                    <button onclick="copyIdToClipboard()" style="margin-left: 10px;">Copy</button>
                </h3>
                <h3>Your Username: <span id="displayUsername"></span></h3>
                <div id="status" class="connection-status disconnected">Not connected</div>
            </div>
            
            <script>
                function generateId() {
                    const id = "12345-ABCDE"; 
                    document.getElementById("myId").innerText = id;
                }
            
                function copyIdToClipboard() {
                    const idText = document.getElementById("myId").innerText;
                    navigator.clipboard.writeText(idText).then(() => {
                        alert("ID copied to clipboard!");
                    }).catch(err => {
                        console.error("Failed to copy ID: ", err);
                    });
                }
            
                document.addEventListener("DOMContentLoaded", generateId);
            </script>            

            <div class="contact-list">
                <h3>Saved Contacts</h3>
                <div id="savedContacts"></div>
            </div>

            <div>
                <h3>Connect to a peer:</h3>
                <input type="text" id="peerIdInput" placeholder="Enter peer ID">
                <button onclick="connectToPeer()">Connect</button>
            </div>

            <div id="messageArea"></div>

            <div class="message-input-container">
                <input type="text" id="messageInput" placeholder="Type your message">
                <input type="file" id="fileInput" accept="image/*" style="display: none;" onchange="sendMessage()">
                <button onclick="openFileManager()">📁</button>
                <button onclick="sendMessage()">Send</button>
            </div>            

            <div>
                <h4>Debug Log:</h4>
                <div id="debugArea"></div>
            </div>
        </div>
    </div>

    <script>
        let myId;
        let peer = null;
        let conn = null;
        let retryCount = 0;
        const MAX_RETRIES = 3;
        let username = '';
        let password = '';
        let encryptionKey = '';

        function generatePersistentId(username, password) {
            const hash = CryptoJS.SHA256(username + password).toString().substring(0, 16);
            return `user-${hash}`;
        }

        function setUsername() {
            const usernameInput = document.getElementById('usernameInput');
            const passwordInput = document.getElementById('passwordInput');
            if (usernameInput.value.trim()) {
                username = usernameInput.value.trim();
                password = passwordInput.value.trim();
                localStorage.setItem('username', username);
                localStorage.setItem('password', password);
                document.getElementById('displayUsername').textContent = username;
                document.getElementById('setupPanel').style.display = 'none';
                document.getElementById('mainPanel').style.display = 'block';
                initPeer();
                loadSavedContacts();
            } else {
                alert('Please enter a valid username');
            }
        }

        window.onload = function() {
            const savedUsername = localStorage.getItem('username');
            if (savedUsername) {
                document.getElementById('usernameInput').value = savedUsername;
                setUsername();
            }
        };
        
        function clearContacts() {
            if (confirm('Are you sure you want to clear all contacts? This cannot be undone.')) {
                localStorage.removeItem('contacts');
                loadSavedContacts();
                log('All contacts cleared');
            }
        }

        function exportContacts() {
            const contacts = localStorage.getItem('contacts') || '{}';
            const blob = new Blob([contacts], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'p2p-contacts.json';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        function importContacts(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    try {
                        const contacts = JSON.parse(e.target.result);
                        localStorage.setItem('contacts', JSON.stringify(contacts));
                        loadSavedContacts();
                        log('Contacts imported successfully');
                    } catch (err) {
                        log('Error importing contacts: ' + err.message);
                    }
                };
                reader.readAsText(file);
            }
        }

        function removeContact(peerId) {
            if (confirm('Are you sure you want to remove this contact?')) {
                let contacts = JSON.parse(localStorage.getItem('contacts') || '{}');
                delete contacts[peerId];
                localStorage.setItem('contacts', JSON.stringify(contacts));
                loadSavedContacts();
                log(`Contact ${peerId} removed`);
            }
        }

        function generateEncryptionKey() {
            return CryptoJS.lib.WordArray.random(256 / 8).toString();
        }

        function encryptMessage(message) {
            return CryptoJS.AES.encrypt(message, encryptionKey).toString();
        }

        function decryptMessage(encryptedMessage) {
            const bytes = CryptoJS.AES.decrypt(encryptedMessage, encryptionKey);
            return bytes.toString(CryptoJS.enc.Utf8);
        }

        function setUsername() {
            const usernameInput = document.getElementById('usernameInput');
            if (usernameInput.value.trim()) {
                username = usernameInput.value.trim();
                document.getElementById('displayUsername').textContent = username;
                document.getElementById('setupPanel').style.display = 'none';
                document.getElementById('mainPanel').style.display = 'block';
                initPeer();
                loadSavedContacts();
            } else {
                alert('Please enter a valid username');
            }
        }

        function saveContact(peerId, peerUsername) {
            let contacts = JSON.parse(localStorage.getItem('contacts') || '{}');
            contacts[peerId] = peerUsername;
            localStorage.setItem('contacts', JSON.stringify(contacts));
            loadSavedContacts();
        }

        function loadSavedContacts() {
            const contacts = JSON.parse(localStorage.getItem('contacts') || '{}');
            const contactsDiv = document.getElementById('savedContacts');
            contactsDiv.innerHTML = '';

            Object.entries(contacts).forEach(([peerId, peerUsername]) => {
                // Skip the user's own ID
                // NOT WORKING LEL :3
                // WAIT NO... it is...
                if (peerId === myId) return;

                const contactElement = document.createElement('div');
                contactElement.className = 'contact-item';
                contactElement.innerHTML = `
                    <span>${peerUsername} (${peerId})</span>
                    <div>
                        <button onclick="connectToPeerById('${peerId}')">Connect</button>
                        <button class="danger-button" onclick="removeContact('${peerId}')">Remove</button>
                    </div>
                `;
                contactsDiv.appendChild(contactElement);
            });
        }

        function connectToPeerById(peerId) {
            document.getElementById('peerIdInput').value = peerId;
            connectToPeer();
        }

        function log(message) {
            const debugArea = document.getElementById('debugArea');
            const timestamp = new Date().toLocaleTimeString();
            debugArea.innerHTML += `<div>[${timestamp}] ${message}</div>`;
            debugArea.scrollTop = debugArea.scrollHeight;
            console.log(`[${timestamp}] ${message}`);
        }

        function initPeer() {
            const persistentId = generatePersistentId(username);
            
            const config = {
                debug: 2,
                config: {
                    iceServers: [
                        { urls: 'stun:stun.l.google.com:19302' },
                        { urls: 'stun:stun1.l.google.com:19302' },
                        { urls: 'stun:stun2.l.google.com:19302' },
                        { urls: 'stun:stun3.l.google.com:19302' },
                        { urls: 'stun:stun4.l.google.com:19302' }
                    ],
                    iceCandidatePoolSize: 10,
                }
            };
            
            peer = new Peer(persistentId, config);
            
            peer.on('open', (id) => {
                myId = id;  // Store user's own ID
                document.getElementById('myId').textContent = id;
                log('Peer initialized successfully with persistent ID');
            });

            peer.on('connection', (connection) => {
                conn = connection;
                log('Incoming connection detected');
                setupConnection();
            });

            peer.on('error', (err) => {
                log(`Peer error: ${err.type}`);
                handleError(err);
            });

            peer.on('disconnected', () => {
                log('Disconnected from server, attempting to reconnect...');
                peer.reconnect();
            });
        }

        function handleError(err) {
            document.getElementById('status').textContent = 'Error: ' + err.type;
            document.getElementById('status').className = 'connection-status disconnected';
            
            if (err.type === 'peer-unavailable') {
                log('Peer not found or unavailable');
            } else if (err.type === 'network' || err.type === 'disconnected') {
                if (retryCount < MAX_RETRIES) {
                    retryCount++;
                    log(`Attempting reconnection (${retryCount}/${MAX_RETRIES})...`);
                    setTimeout(() => {
                        if (conn) {
                            conn.close();
                        }
                        connectToPeer();
                    }, 2000);
                }
            }
        }

        function connectToPeer() {
            const peerId = document.getElementById('peerIdInput').value;
            if (!peerId) {
                alert('Please enter a peer ID');
                return;
            }

            log(`Attempting to connect to peer: ${peerId}`);
            
            // Generate new encryption key for this connection
            // (^///^)
            encryptionKey = generateEncryptionKey();
            
            const connectionOptions = {
                reliable: true,
                serialization: 'json',
                metadata: { 
                    username: username,
                    timestamp: Date.now(),
                    encryptionKey: encryptionKey
                }
            };

            conn = peer.connect(peerId, connectionOptions);
            setupConnection();
        }

        function setupConnection() {
            conn.on('open', () => {
                retryCount = 0;
                document.getElementById('status').textContent = 'Connected to peer!';
                document.getElementById('status').className = 'connection-status connected';
                log('Connection established successfully');

                // Save the contact
                if (conn.metadata && conn.metadata.username) {
                    saveContact(conn.peer, conn.metadata.username);
                }

                // Set encryption key from metadata if receiving connection
                // YAY LOCAL FILES
                if (conn.metadata && conn.metadata.encryptionKey) {
                    encryptionKey = conn.metadata.encryptionKey;
                }
            });

            conn.on('data', (data) => {
                const decryptedMessage = decryptMessage(data.message);
                const messageArea = document.getElementById('messageArea');
                const timestamp = new Date().toLocaleTimeString();
                messageArea.innerHTML += `
                    <div class="message received">
                        <strong>${data.username}:</strong> ${decryptedMessage}
                        <div class="timestamp">${timestamp}</div>
                    </div>
                `;
                messageArea.scrollTop = messageArea.scrollHeight;
            });

            conn.on('close', () => {
                document.getElementById('status').textContent = 'Disconnected';
                document.getElementById('status').className = 'connection-status disconnected';
                log('Connection closed');
                conn = null;
            });

            conn.on('error', (err) => {
                log(`Connection error: ${err.message || err}`);
                handleError(err);
            });
        }

        // Function to open the file manager by clicking the hidden file input
        function openFileManager() {
            document.getElementById('fileInput').click();
        }

        function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const fileInput = document.getElementById('fileInput');
            let message = messageInput.value;

            if (!conn || (!message && !fileInput.files.length)) return;

            function handleFile(file) {
                return new Promise((resolve, reject) => {
                    const reader = new FileReader();
                    reader.onload = () => resolve({ name: file.name, size: file.size, type: file.type, dataUrl: reader.result });
                    reader.onerror = (error) => reject(error);
                    reader.readAsDataURL(file);
                });
            }

            async function processMessage() {
                let finalMessage = message;

                if (fileInput.files.length > 0) {
                    const file = fileInput.files[0];
                    try {
                        const { name, size, type, dataUrl } = await handleFile(file);

                        const fileSizeKB = (size / 1024).toFixed(2);
                        const isImage = type.startsWith('image/');

                        finalMessage += `
                            <div class="file-container">
                                <p><strong>File:</strong> ${name} (${fileSizeKB} KB)</p>
                                ${isImage 
                                    ? `<img src="${dataUrl}" alt="${name}" class="message-image" style="max-width: 100%; height: auto;"/>`
                                    : `<p>File preview not available</p>`
                                }
                                <a href="${dataUrl}" download="${name}" class="file-download-link" style="color: red;">
                                    Download
                                </a>
                            </div>
                        `;
                    } catch (error) {
                        console.error("Error reading file:", error);
                    }
                }

                return finalMessage;
            }

            processMessage().then(finalMessage => {
                try {
                    const encryptedMessage = encryptMessage(finalMessage);
                    conn.send({
                        username: username,
                        message: encryptedMessage
                    });

                    const messageArea = document.getElementById('messageArea');
                    const timestamp = new Date().toLocaleTimeString();
                    messageArea.innerHTML += `
                        <div class="message sent">
                            <strong>You:</strong> ${finalMessage}
                            <div class="timestamp">${timestamp}</div>
                        </div>
                    `;
                    messageArea.scrollTop = messageArea.scrollHeight;
                    messageInput.value = '';
                    fileInput.value = ''; // Reset file input after sending
                    log('Message sent successfully');
                } catch (err) {
                    log(`Error sending message: ${err.message}`);
                }
            });
        }

        // Handle Enter key in message input
        document.getElementById('messageInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Handle Enter key in username input
        document.getElementById('usernameInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                setUsername();
            }
        });

        // Handle Enter key in peer ID input
        document.getElementById('peerIdInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                connectToPeer();
            }
        });
    </script>
</body>
</html>